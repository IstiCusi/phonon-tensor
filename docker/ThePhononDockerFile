# -------------------------------- Base image --------------------------------
FROM nvidia/cuda:12.3.0-base-ubuntu22.04 as base

# --------------------- Prevent apt from asking questions ---------------------
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=C.UTF-8
ENV TERM xterm-256color

# ------------------ Update and install fundamental packages ------------------
RUN apt-get update && apt-get install -y \
    gnupg ca-certificates wget curl \
    git build-essential \
    python3.11 python3.11-venv python3.11-distutils python3.11-dev \
    python3-pip libssl-dev libffi-dev \
    python3-tk \
    software-properties-common python3-software-properties \
    clang-15 clangd-15 clang-tidy-15 \
    make ncurses-dev xclip \
    tmux \
    zsh \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Explicitly update alternatives to use python3.11 as the default python3
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 \
    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

RUN update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-15 150 \
    && update-alternatives --config clangd

# Install pip specifically for python3.11
RUN apt-get update \
    && apt-get install -y python3-pip \
    && python3.11 -m pip install --upgrade pip

# -------------------------- Install zsh environment --------------------------
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
COPY ./zshrc /root/.zshrc

# --------------------------- Install cuda keyring ---------------------------
RUN apt-get update
RUN apt-get install -y gnupg ca-certificates wget

RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
RUN dpkg -i cuda-keyring_1.1-1_all.deb

# ---------------------- Install cuda related libraries  ----------------------
RUN apt-get install -y --no-install-recommends \
    cuda-command-line-tools-12-3 \
    cuda-cudart-dev-12-3 \
    cuda-nvcc-12-3 \
    cuda-cupti-12-3 \
    cuda-nvprune-12-3 \
    cuda-libraries-12-3 \
    cuda-nvrtc-12-3 \
    libcufft-12-3 \
    libcurand-12-3 \
    libcusolver-12-3 \
    libcusparse-12-3 \
    libcublas-12-3 \
    libcudnn8=8.9.6.50-1+cuda12.2 \
    libnvinfer-plugin8=8.6.1.6-1+cuda12.0 \
    libnvinfer8=8.6.1.6-1+cuda12.0 \
    build-essential \
    pkg-config \
    curl \
    software-properties-common \
    unzip 

# ------------------ Upgrade pip and install Python packages ------------------
RUN python3.11 -m pip install --upgrade pip 
RUN python3.11 -m pip install --no-cache-dir numpy pandas matplotlib scipy scikit-learn seaborn notebook jupyter tf-nightly keras pyright

# ---------------------------- Link CUDA libraries ----------------------------
RUN ln -sf /usr/local/cuda-12.3/targets/x86_64-linux/lib/libcudnn.so.8 /usr/lib/x86_64-linux-gnu/libcudnn.so.8 && \
    ln -sf /usr/local/cuda-12.3/targets/x86_64-linux/lib/libcublas.so.11 /usr/lib/x86_64-linux-gnu/libcublas.so.11 && \
    ln -sf /usr/local/cuda-12.3/targets/x86_64-linux/lib/libcublasLt.so.11 /usr/lib/x86_64-linux-gnu/libcublasLt.so.11

# ------------- Install Neovim and Node.js for NeoVim extensions -------------
RUN curl -LO https://github.com/neovim/neovim/releases/download/v0.9.5/nvim-linux64.tar.gz && \
    mkdir -p /opt/nvim && \
    tar -C /opt/nvim --strip-components=1 -xzf nvim-linux64.tar.gz && \
    ln -s /opt/nvim/bin/nvim /usr/bin/nvim && \
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g pyright clangd

# ------------------------ Install tmux configurations ------------------------
RUN git clone https://github.com/tmux-plugins/tpm /root/.tmux/plugins/tpm
COPY ./tmux.conf /root/.tmux.conf
RUN /root/.tmux/plugins/tpm/bin/install_plugins

# ----------------------------- Install LunarVim -----------------------------
RUN mkdir -p /root/.config/nvim && touch /root/.config/nvim/init.lua
RUN mkdir -p /root/.config/lvim && touch /root/.config/lvim/config.lua
COPY ./config.lua /root/.config/lvim/config.lua

COPY ./lunarvim.sh ./.lunarvim.sh
RUN bash -c "LV_BRANCH='release-1.3/neovim-0.9' bash <(curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/release-1.3/neovim-0.9/utils/installer/install.sh)" && \
    echo "alias vv='/root/.local/bin/lvim'" >> /root/.bashrc \
    echo "alias vv='/root/.local/bin/lvim'" >> /root/.zshrc 

# RUN bash -c "LV_BRANCH='release-1.3/neovim-0.9' bash <(cat ./lunarvim.sh)" && \

ENV PATH="/root/.local/bin:$PATH"
ENV USER=root

RUN lvim --headless +'TSInstallSync maintained' +qall
RUN lvim --headless +'LvimCacheReset' +qall

# ---------------------- Jupyter Notebook configuration ----------------------
RUN jupyter notebook --generate-config && \
    echo "c.NotebookApp.ip = '0.0.0.0'" >> ~/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.port = 8888" >> ~/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.open_browser = False" >> ~/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.allow_root = True" >> ~/.jupyter/jupyter_notebook_config.py

# --------------------- Setup working place - map to host ---------------------
RUN mkdir /home/phonon/
RUN mkdir /home/phonon/templates
RUN mkdir /home/phonon/workingdir

RUN mkdir -p /home/phonon/tensorflow-tutorials && \
    cd /home/phonon/tensorflow-tutorials && \
    wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/classification.ipynb && \
    wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/overfit_and_underfit.ipynb && \
    wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/regression.ipynb && \
    wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/save_and_load.ipynb && \
    wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/text_classification.ipynb && \
    wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/text_classification_with_hub.ipynb

# ------------------- Add template library to the workspace -------------------
WORKDIR /home/phonon
COPY ./templates /home/phonon/templates

# ------------------------ Install cuda path variables ------------------------
ENV CUDA_HOME=/usr/local/cuda-12.3
ENV PATH=$CUDA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$CUDA_HOME/targets/x86_64-linux/lib:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

# Command to run Jupyter Notebook
CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]

# COPY start-jupyter.sh /usr/local/bin/start-jupyter.sh
# RUN chmod +x /usr/local/bin/start-jupyter.sh
# CMD ["/usr/local/bin/start-jupyter.sh"]

# ------------------- vim filetype for syntax highlighting -------------------
# vim: ft=dockerfile
